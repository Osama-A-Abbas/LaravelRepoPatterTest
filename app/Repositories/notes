1- create BaseRepo + BaseRepoInterface

/\interfaces contains functions with no body e.g:  public function funcName(type $var);

2- BaseRepo will implment BaseRepoInterface

3- crate other interfaces and repos for each model, these other repos will:
     1- extended the BaseRepo
     2- implement the interface for that model





Notes:
- It is a common practise to bind an interface to its implementation class
in the AppServiceProvider register method, doing so will make it easier changing between
interfaces and classes.

- Laravel automatically can bind them using naming convention,
e.g: PostInterface  ---- Post
Laravel will figure that out, yet it is better to bind them in AppServiceProvider too


- So far:
  create BaseRepoInterface and BaseRepo that implements it
  create ModelInterface and ModelRepo which extends BaseRepo and Implement its own ModelInterface
  Create DTO (Data Transfer object) which is responsible for data Transferring
  use DTO inside the ModelRepo
  IN the controller __construct invoke the ModelRepoInterface


-----------------------------------------
Notes 2:
- what is StdeClass?
The stdClass in PHP is a generic, built-in class that represents a standard object.
 It is often used as a lightweight, flexible container for data when you need an object but do
  not want to define a custom class. Essentially, it is the default class for objects created
   from associative arrays or when casting data to an object.


----

 tap() method allows as to retrieve the model, then update it inside the tap() method and return the updated model
 tap() is perfect for chaining methods and writing shorter code that are totally unreadable but look coolðŸ‘ŒðŸ‘Œ
